
--------------------------------------------------------------------------------
--- FILE: public/index.html ---
--------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome to the Wholesale BD API</title>
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    <style>
        :root {
            --primary-color: #2563eb; --secondary-color: #10b981; --tertiary-color: #f97316;
            --quaternary-color: #8b5cf6; --success-color: #22c55e; --error-color: #ef4444;
            --text-color-light: #f9fafb; --card-bg-color: rgba(255, 255, 255, 0.1);
            --border-radius: 12px; --shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        }
        html { scroll-behavior: smooth; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            margin: 0; min-height: 100vh; background-image: linear-gradient(135deg, #1e3a8a, #312e81);
            background-attachment: fixed; color: var(--text-color-light); display: flex; flex-direction: column;
            align-items: center; justify-content: center; padding: 2rem 0;
        }
        .container {
            max-width: 600px; width: 90%; margin: auto; padding: 2rem 1.5rem; background: var(--card-bg-color);
            backdrop-filter: blur(16px); border: 1px solid rgba(255, 255, 255, 0.18); border-radius: var(--border-radius);
            box-shadow: var(--shadow); text-align: center;
        }
        .logo { margin: 0 auto 2rem auto; max-width: 250px; }
        .logo img { width: 100%; height: auto; filter: drop-shadow(0 4px 6px rgba(0,0,0,0.4)); }
        h1 { font-size: clamp(1.8rem, 5vw, 2.5rem); margin-top: 0; margin-bottom: 1rem; }
        p { font-size: clamp(1rem, 2.5vw, 1.15rem); line-height: 1.6; margin-bottom: 2.5rem; opacity: 0.95; max-width: 500px; margin-left: auto; margin-right: auto; }
        .actions { display: flex; gap: 1rem; justify-content: center; flex-direction: column; }
        .btn { display: flex; align-items: center; justify-content: center; gap: 0.75rem; padding: 14px 28px; border-radius: var(--border-radius); text-decoration: none; font-size: 1rem; font-weight: 600; border: none; cursor: pointer; transition: all 0.3s ease; }
        .btn:disabled { opacity: 0.6; cursor: not-allowed; }
        .btn .icon { width: 20px; height: 20px; }
        .btn-primary { background-image: linear-gradient(45deg, #3b82f6 0%, #2563eb 100%); color: var(--text-color-light); box-shadow: 0 4px 15px rgba(0,0,0,0.2); }
        .btn-primary:hover:not(:disabled) { transform: translateY(-3px); box-shadow: 0 7px 20px rgba(59, 130, 246, 0.4); }
        .btn-secondary { background-image: linear-gradient(45deg, #10b981 0%, #22c55e 100%); color: var(--text-color-light); }
        .btn-quaternary { background-image: linear-gradient(45deg, #a78bfa 0%, #8b5cf6 100%); color: var(--text-color-light); }

        .analytics-container {
            max-width: 700px; width: 90%; margin: 2rem auto 0 auto; padding: 1.5rem;
            background: var(--card-bg-color); backdrop-filter: blur(16px); border: 1px solid rgba(255, 255, 255, 0.18);
            border-radius: var(--border-radius); box-shadow: var(--shadow); display: flex; flex-wrap: wrap; gap: 1rem; justify-content: center;
        }
        .analytics-stat {
            background: rgba(0,0,0,0.15); padding: 1rem; border-radius: 8px; flex-grow: 1;
            min-width: 180px; display: flex; align-items: center; gap: 1rem;
        }
        .stat-icon { flex-shrink: 0; width: 40px; height: 40px; stroke-width: 1.5; color: var(--text-color-light); opacity: 0.8; }
        .stat-text .stat-value { font-size: 1.75rem; font-weight: 700; display: block; line-height: 1.2; }
        .stat-text .stat-label { font-size: 0.9rem; opacity: 0.8; display: block; }
        .hidden { display: none; }
        
        footer { width: 100%; text-align: center; font-size: 0.9rem; opacity: 0.8; padding: 2rem 1rem; margin-top: auto; }
        @media (min-width: 600px) { .actions { flex-direction: row; flex-wrap: wrap; } }
    </style>
</head>
<body>
    <main class="container">
        <a href="https://wholesale-bd-web-app.vercel.app" class="logo" title="Visit Wholesale BD Website">
            <img src="/logo.svg" alt="Wholesale BD Logo">
        </a>
        <h1>Welcome to the Wholesale BD Backend API</h1>
        <p>This is the engine powering Wholesale BD, Bangladesh's premier B2B wholesale platform. Explore our website or dive into the API documentation.</p>
        <div class="actions">
            <a href="https://wholesale-bd-web-app.vercel.app" class="btn btn-primary"><svg class="icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-4.5 4.5L21 3m0 0h-5.25M21 3v5.25" /></svg>Visit Website</a>
            <a href="/api" class="btn btn-secondary"><svg class="icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M17.25 6.75 22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3-4.5 12" /></svg>API Docs</a>
            <button id="show-analytics-btn" class="btn btn-quaternary">
                <svg class="icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M10.5 6a7.5 7.5 0 1 0 7.5 7.5h-7.5V6Z" /><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 10.5H21A7.5 7.5 0 0 0 13.5 3v7.5Z" /></svg>
                Show Highlights
            </button>
        </div>
    </main>

    <section id="analytics-section" class="analytics-container hidden">
        <div class="analytics-stat">
            <svg class="stat-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M18 18.72a9.094 9.094 0 0 0 3.741-.479 3 3 0 0 0-4.682-2.72m-7.5-2.962A3 3 0 0 1 3 18.72v-2.172c0-.923.63-1.724 1.52-1.962a7.5 7.5 0 0 1 1.52-1.962M12 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM12 10.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0Z" /></svg>
            <div class="stat-text">
                <span id="total-users-count" class="stat-value">...</span>
                <span class="stat-label">Total Users</span>
            </div>
        </div>
        <div class="analytics-stat">
            <svg class="stat-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="m21 7.5-9-5.25L3 7.5m18 0-9 5.25m9-5.25v9l-9 5.25M3 7.5l9 5.25M3 7.5v9l9 5.25m0-9v9" /></svg>
            <div class="stat-text">
                <span id="total-products-count" class="stat-value">...</span>
                <span class="stat-label">Unique Products</span>
            </div>
        </div>
        <div class="analytics-stat">
            <svg class="stat-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" /></svg>
            <div class="stat-text">
                <span id="total-categories-count" class="stat-value">...</span>
                <span class="stat-label">Total Categories</span>
            </div>
        </div>
        <div class="analytics-stat">
            <svg class="stat-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" /><path stroke-linecap="round" stroke-linejoin="round" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1 1 15 0Z" /></svg>
            <div class="stat-text">
                <span id="total-zones-count" class="stat-value">...</span>
                <span class="stat-label">Total Zones</span>
            </div>
        </div>
        <div class="analytics-stat">
            <svg class="stat-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 18.75a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 0 1-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h1.125c.621 0 1.125-.504 1.125-1.125V14.25m-17.25 4.5v-1.875a3.375 3.375 0 0 1 3.375-3.375h9.75a3.375 3.375 0 0 1 3.375 3.375v1.875" /><path stroke-linecap="round" stroke-linejoin="round" d="M9 11.25l3-3m0 0l3 3m-3-3v7.5" /></svg>
            <div class="stat-text">
                <span id="total-orders-count" class="stat-value">...</span>
                <span class="stat-label">Total Orders</span>
            </div>
        </div>
        <div class="analytics-stat">
            <svg class="stat-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" /></svg>
            <div class="stat-text">
                <span id="pending-orders-count" class="stat-value">...</span>
                <span class="stat-label">Pending Orders</span>
            </div>
        </div>
    </section>

    <footer><p>&copy; 2024 Wholesale BD &bull; All Rights Reserved</p></footer>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const showAnalyticsBtn = document.getElementById('show-analytics-btn');
            const analyticsSection = document.getElementById('analytics-section');
            
            const totalUsersSpan = document.getElementById('total-users-count');
            const totalProductsSpan = document.getElementById('total-products-count');
            const totalCategoriesSpan = document.getElementById('total-categories-count');
            const totalZonesSpan = document.getElementById('total-zones-count');
            const totalOrdersSpan = document.getElementById('total-orders-count');
            const pendingOrdersSpan = document.getElementById('pending-orders-count');

            async function fetchAnalyticsData() {
                try {
                    const [userResponse, productResponse, categoryResponse, zoneResponse, orderResponse] = await Promise.all([
                        fetch('/api/v1/users/count'),
                        fetch('/api/v1/products/count'),
                        fetch('/api/v1/categories/count'),
                        fetch('/api/v1/zones/count'),
                        fetch('/api/v1/orders/analytics')
                    ]);

                    if (!userResponse.ok || !productResponse.ok || !orderResponse.ok || !categoryResponse.ok || !zoneResponse.ok) {
                        throw new Error('Failed to fetch one or more analytics endpoints');
                    }

                    const userData = await userResponse.json();
                    const productData = await productResponse.json();
                    const categoryData = await categoryResponse.json();
                    const zoneData = await zoneResponse.json();
                    const orderData = await orderResponse.json();

                    totalUsersSpan.textContent = userData.totalUsers;
                    totalProductsSpan.textContent = productData.totalProducts;
                    totalCategoriesSpan.textContent = categoryData.totalCategories;
                    totalZonesSpan.textContent = zoneData.totalZones;
                    totalOrdersSpan.textContent = orderData.total;
                    pendingOrdersSpan.textContent = orderData.pending;

                } catch (error) {
                    console.error('Error fetching analytics:', error);
                    [totalUsersSpan, totalProductsSpan, totalCategoriesSpan, totalZonesSpan, totalOrdersSpan, pendingOrdersSpan]
                        .forEach(span => span.textContent = 'N/A');
                }
            }

            showAnalyticsBtn.addEventListener('click', () => {
                if (analyticsSection.classList.contains('hidden')) {
                    analyticsSection.classList.remove('hidden');
                }
                analyticsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
            });
            
            fetchAnalyticsData();
        });
    </script>
</body>
</html>

--------------------------------------------------------------------------------
--- FILE: src/app.controller.ts ---
--------------------------------------------------------------------------------

// src/app.controller.ts

import { Controller, Get, ServiceUnavailableException } from '@nestjs/common';
import { AppService, HealthStatus } from './app.service';
import { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';
import { Throttle } from '@nestjs/throttler';

@ApiTags('Health Check')
@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  @ApiOperation({ summary: 'Default welcome endpoint for the API' })
  getHello(): string {
    return this.appService.getHello();
  }

  @Get('status')
  @ApiOperation({ summary: 'Get the health status of the API and Database' })
  @ApiResponse({ status: 200, description: 'API and database are healthy.' })
  @ApiResponse({
    status: 503,
    description: 'Service is unavailable (e.g., database is down).',
  })
  @Throttle({ default: { limit: 10, ttl: 60000 } })
  // FIXED: Removed 'async' and 'Promise' to match the service method
  getStatus(): HealthStatus {
    // FIXED: Removed 'await'
    const healthStatus = this.appService.getStatus();

    if (healthStatus.dbStatus !== 'connected') {
      throw new ServiceUnavailableException(healthStatus);
    }

    return healthStatus;
  }
}


--------------------------------------------------------------------------------
--- FILE: src/app.module.ts ---
--------------------------------------------------------------------------------

// src/app.module.ts

import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { MongooseModule } from '@nestjs/mongoose';
import { ThrottlerModule } from '@nestjs/throttler';
import { UsersModule } from './users/users.module';
import { ProductsModule } from './products/products.module';
import { OrdersModule } from './orders/orders.module';
import { CategoriesModule } from './categories/categories.module';
import { ZonesModule } from './zones/zones.module';

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
      envFilePath: '.env',
    }),

    MongooseModule.forRootAsync({
      imports: [ConfigModule],
      // FIXED: Removed 'async' as it's not needed here
      useFactory: (configService: ConfigService) => ({
        uri: configService.get<string>('MONGODB_URI'),
      }),
      inject: [ConfigService],
    }),

    ThrottlerModule.forRoot([
      {
        ttl: 60000,
        limit: 60,
      },
    ]),

    UsersModule,

    ProductsModule,

    OrdersModule,

    CategoriesModule,

    ZonesModule,
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}


--------------------------------------------------------------------------------
--- FILE: src/app.service.ts ---
--------------------------------------------------------------------------------

// src/app.service.ts

import { Injectable } from '@nestjs/common';
import { InjectConnection } from '@nestjs/mongoose';
import { Connection } from 'mongoose';

export interface HealthStatus {
  apiStatus: 'ok';
  dbStatus: 'connected' | 'disconnected';
  timestamp: string;
}

@Injectable()
export class AppService {
  constructor(@InjectConnection() private readonly connection: Connection) {}

  getHello(): string {
    return 'Welcome to the Wholesale BD API!';
  }

  // FIXED: Removed 'async' and 'Promise' as the operation is synchronous
  getStatus(): HealthStatus {
    // FIXED: Added type assertion '(this.connection.readyState as number)'
    // to fix the unsafe-enum-comparison lint error.
    const dbStatus =
      (this.connection.readyState as number) === 1
        ? 'connected'
        : 'disconnected';

    return {
      apiStatus: 'ok',
      dbStatus,
      timestamp: new Date().toISOString(),
    };
  }
}


--------------------------------------------------------------------------------
--- FILE: src/main.ts ---
--------------------------------------------------------------------------------

// src/main.ts

import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import {
  SwaggerModule,
  DocumentBuilder,
  SwaggerCustomOptions,
} from '@nestjs/swagger';
import { ValidationPipe } from '@nestjs/common';
import { NestExpressApplication } from '@nestjs/platform-express';
import { join } from 'path';

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);

  app.enableCors({
    origin:
      process.env.FRONTEND_URL || 'https://wholesale-bd-web-app.vercel.app',
    credentials: true,
  });

  app.setGlobalPrefix('api/v1');

  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
    }),
  );

  // This is the robust path that works with the Vercel build process.
  app.useStaticAssets(join(__dirname, '..', 'public'));

  const swaggerDocConfig = new DocumentBuilder()
    .setTitle(`ðŸ“¦ Wholesale BD Backend`)
    .setDescription('The official API for the Wholesale BD B2B Platform.')
    .setVersion('1.0')
    .addTag('API Endpoints')
    .addBearerAuth()
    .build();
  const document = SwaggerModule.createDocument(app, swaggerDocConfig);

  const customSwaggerOptions: SwaggerCustomOptions = {
    customSiteTitle: `Wholesale BD API Docs`,
    customfavIcon: '/favicon.ico',
    customCssUrl:
      'https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.11.0/swagger-ui.min.css',
    customJs: [
      'https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.11.0/swagger-ui-bundle.js',
      'https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.11.0/swagger-ui-standalone-preset.js',
    ],
    customCss: `
      .swagger-ui .topbar { background-color: #1e3a8a; }
      .swagger-ui .topbar .link { color: #FFFFFF; }
    `,
  };

  SwaggerModule.setup('api', app, document, customSwaggerOptions);

  // This part only runs locally, not on Vercel
  if (!process.env.VERCEL) {
    const port = process.env.PORT || 3001;
    await app.listen(port);
    console.log(`ðŸš€ Local server running on: http://localhost:${port}`);
    console.log(`ðŸŒ Public index page at: http://localhost:${port}/`);
    console.log(`ðŸ“š Swagger docs at: http://localhost:${port}/api`);
  } else {
    // This part runs on Vercel
    await app.init();
  }

  return app.getHttpAdapter().getInstance();
}

export default bootstrap();


--------------------------------------------------------------------------------
--- FILE: src/auth/guards/api-key.guard.ts ---
--------------------------------------------------------------------------------

import {
  Injectable,
  CanActivate,
  ExecutionContext,
  UnauthorizedException,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
// We no longer need to import Request from 'express', avoiding the conflict.

@Injectable()
export class ApiKeyGuard implements CanActivate {
  constructor(private configService: ConfigService) {}

  canActivate(context: ExecutionContext): boolean {
    // FIXED: We explicitly define the type of 'request' with the 'headers' property we need.
    const request: { headers: { [key: string]: string } } = context
      .switchToHttp()
      .getRequest();

    const apiKey = request.headers['x-api-key'];

    const validApiKey = this.configService.getOrThrow<string>('API_KEY');

    if (apiKey !== validApiKey) {
      throw new UnauthorizedException('Invalid or missing API Key');
    }

    return true;
  }
}


--------------------------------------------------------------------------------
--- FILE: src/categories/categories.controller.ts ---
--------------------------------------------------------------------------------

import { Controller, Get } from '@nestjs/common';
import { ApiOperation, ApiTags } from '@nestjs/swagger';
import { CategoriesService } from './categories.service';
import { CategoryResponseDto } from './dto/category-response.dto';

@ApiTags('Categories')
@Controller('categories')
export class CategoriesController {
  constructor(private readonly categoriesService: CategoriesService) {}

  // --- ADD THIS NEW ENDPOINT ---
  @Get('count')
  @ApiOperation({ summary: 'Get the total number of categories' })
  async getCategoryCount(): Promise<{ totalCategories: number }> {
    const count = await this.categoriesService.countAll();
    return { totalCategories: count };
  }

  @Get()
  @ApiOperation({ summary: 'Get a list of all categories' })
  async findAll(): Promise<CategoryResponseDto[]> {
    const categories = await this.categoriesService.findAll();
    return categories.map((cat) =>
      CategoryResponseDto.fromCategoryDocument(cat),
    );
  }
}


--------------------------------------------------------------------------------
--- FILE: src/categories/categories.module.ts ---
--------------------------------------------------------------------------------

import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { CategoriesController } from './categories.controller';
import { CategoriesService } from './categories.service';
import { Category, CategorySchema } from './schemas/category.schema';

@Module({
  imports: [
    MongooseModule.forFeature([
      { name: Category.name, schema: CategorySchema },
    ]),
  ],
  controllers: [CategoriesController],
  providers: [CategoriesService],
})
export class CategoriesModule {}


--------------------------------------------------------------------------------
--- FILE: src/categories/categories.service.ts ---
--------------------------------------------------------------------------------

import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Category, CategoryDocument } from './schemas/category.schema';

@Injectable()
export class CategoriesService {
  constructor(
    @InjectModel(Category.name) private categoryModel: Model<CategoryDocument>,
  ) {}

  async findAll(): Promise<CategoryDocument[]> {
    return this.categoryModel.find().sort({ sortOrder: 1 }).exec();
  }

  // --- ADD THIS NEW METHOD ---
  async countAll(): Promise<number> {
    return this.categoryModel.countDocuments().exec();
  }
}


--------------------------------------------------------------------------------
--- FILE: src/categories/dto/category-response.dto.ts ---
--------------------------------------------------------------------------------

import { CategoryDocument } from '../schemas/category.schema';

export class CategoryResponseDto {
  _id: string;
  name: string;
  description?: string;
  isActive: boolean;
  sortOrder: number;

  static fromCategoryDocument(
    categoryDoc: CategoryDocument,
  ): CategoryResponseDto {
    const dto = new CategoryResponseDto();
    dto._id = categoryDoc._id.toString();
    dto.name = categoryDoc.name;
    dto.description = categoryDoc.description;
    dto.isActive = categoryDoc.isActive;
    dto.sortOrder = categoryDoc.sortOrder;
    return dto;
  }
}


--------------------------------------------------------------------------------
--- FILE: src/categories/schemas/category.schema.ts ---
--------------------------------------------------------------------------------

import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { HydratedDocument } from 'mongoose';

export type CategoryDocument = HydratedDocument<Category>;

@Schema({ timestamps: true })
export class Category {
  @Prop({ required: true, unique: true, trim: true })
  name: string;

  @Prop({ trim: true })
  description?: string;

  @Prop({ default: true })
  isActive: boolean;

  @Prop({ default: 0 })
  sortOrder: number;

  // For TypeScript awareness of Mongoose's timestamps
  createdAt: Date;
  updatedAt: Date;
}

export const CategorySchema = SchemaFactory.createForClass(Category);


--------------------------------------------------------------------------------
--- FILE: src/orders/orders.controller.ts ---
--------------------------------------------------------------------------------

import { Controller, Get } from '@nestjs/common';
import { ApiOperation, ApiTags } from '@nestjs/swagger';
import { OrdersService } from './orders.service';
import { OrderResponseDto } from './dto/order-response.dto';

@ApiTags('Orders')
@Controller('orders')
export class OrdersController {
  constructor(private readonly ordersService: OrdersService) {}

  // --- NEW ANALYTICS ENDPOINT ---
  @Get('analytics')
  @ApiOperation({ summary: 'Get aggregated order statistics' })
  async getOrderAnalytics(): Promise<{
    total: number;
    pending: number;
    delivered: number;
  }> {
    return this.ordersService.getAnalytics();
  }

  @Get('count')
  @ApiOperation({ summary: 'Get the total number of orders' })
  async getOrderCount(): Promise<{ totalOrders: number }> {
    const count = await this.ordersService.countAll();
    return { totalOrders: count };
  }

  @Get()
  @ApiOperation({ summary: 'Get a list of all orders' })
  async findAll(): Promise<OrderResponseDto[]> {
    const orders = await this.ordersService.findAll();
    return orders.map((order) => OrderResponseDto.fromOrderDocument(order));
  }
}


--------------------------------------------------------------------------------
--- FILE: src/orders/orders.module.ts ---
--------------------------------------------------------------------------------

import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { OrdersController } from './orders.controller';
import { OrdersService } from './orders.service';
import { Order, OrderSchema } from './schemas/order.schema';

@Module({
  imports: [
    MongooseModule.forFeature([{ name: Order.name, schema: OrderSchema }]),
  ],
  controllers: [OrdersController],
  providers: [OrdersService],
})
export class OrdersModule {}


--------------------------------------------------------------------------------
--- FILE: src/orders/orders.service.ts ---
--------------------------------------------------------------------------------

import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Order, OrderDocument, OrderStatus } from './schemas/order.schema';

@Injectable()
export class OrdersService {
  constructor(
    @InjectModel(Order.name) private orderModel: Model<OrderDocument>,
  ) {}

  async findAll(): Promise<OrderDocument[]> {
    return this.orderModel.find().exec();
  }

  async countAll(): Promise<number> {
    return this.orderModel.countDocuments().exec();
  }

  // --- NEW, MORE EFFICIENT ANALYTICS METHOD ---
  async getAnalytics(): Promise<{
    total: number;
    pending: number;
    delivered: number;
  }> {
    // Run all counting queries in parallel for maximum efficiency
    const [totalCount, pendingCount, deliveredCount] = await Promise.all([
      this.orderModel.countDocuments().exec(),
      this.orderModel.countDocuments({ status: OrderStatus.PENDING }).exec(),
      this.orderModel.countDocuments({ status: OrderStatus.DELIVERED }).exec(),
    ]);

    return {
      total: totalCount,
      pending: pendingCount,
      delivered: deliveredCount,
    };
  }
}


--------------------------------------------------------------------------------
--- FILE: src/orders/dto/order-response.dto.ts ---
--------------------------------------------------------------------------------

import { OrderDocument } from '../schemas/order.schema';

// This DTO defines the shape of an order object when sent in an API response.
export class OrderResponseDto {
  _id: string;
  orderNumber: string;
  customerId: string;
  sellerId: string;
  items: {
    productId: string;
    productName: string;
    quantity: number;
    pricePerUnit: number;
    totalPrice: number;
  }[];
  totalAmount: number;
  shippingAddress: {
    fullName: string;
    city: string;
    zone: string;
  };
  status: string;
  paymentStatus: string;
  createdAt: Date;

  static fromOrderDocument(orderDoc: OrderDocument): OrderResponseDto {
    const dto = new OrderResponseDto();
    dto._id = orderDoc._id.toString();
    dto.orderNumber = orderDoc.orderNumber;
    dto.customerId = orderDoc.customerId;
    dto.sellerId = orderDoc.sellerId;
    dto.items = orderDoc.items.map((item) => ({
      productId: item.productId,
      productName: item.productName,
      quantity: item.quantity,
      pricePerUnit: item.pricePerUnit,
      totalPrice: item.totalPrice,
    }));
    dto.totalAmount = orderDoc.totalAmount;
    dto.shippingAddress = {
      fullName: orderDoc.shippingAddress.fullName,
      city: orderDoc.shippingAddress.city,
      zone: orderDoc.shippingAddress.zone,
    };
    dto.status = orderDoc.status;
    dto.paymentStatus = orderDoc.paymentStatus;
    dto.createdAt = orderDoc.createdAt;
    return dto;
  }
}


--------------------------------------------------------------------------------
--- FILE: src/orders/schemas/order.schema.ts ---
--------------------------------------------------------------------------------

import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import mongoose, { HydratedDocument } from 'mongoose';

export type OrderDocument = HydratedDocument<Order>;

// --- Enums for Type Safety ---
export enum OrderStatus {
  PENDING = 'pending',
  PROCESSING = 'processing',
  READY_FOR_DISPATCH = 'ready_for_dispatch',
  SHIPPED = 'shipped',
  DELIVERED = 'delivered',
  CANCELLED = 'cancelled',
}

export enum PaymentStatus {
  PENDING = 'pending',
  PAID = 'paid',
  FAILED = 'failed',
  REFUNDED = 'refunded',
}

export enum PaymentMethod {
  CASH_ON_DELIVERY = 'cash_on_delivery',
  BANK_TRANSFER = 'bank_transfer',
  MOBILE_BANKING = 'mobile_banking',
  CARD = 'card',
}

// --- Nested Schemas ---
@Schema({ _id: false })
class OrderItem {
  @Prop({
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Product',
    required: true,
  })
  productId: string;

  @Prop({ required: true })
  productName: string;

  @Prop()
  productImage?: string;

  @Prop({ required: true, min: 1 })
  quantity: number;

  @Prop({ required: true })
  pricePerUnit: number;

  @Prop({ required: true })
  totalPrice: number;
}
const OrderItemSchema = SchemaFactory.createForClass(OrderItem);

@Schema({ _id: false })
class ShippingAddress {
  @Prop({ required: true })
  fullName: string;

  @Prop({ required: true })
  phone: string;

  @Prop({ required: true })
  address: string;

  @Prop({ required: true })
  city: string;

  @Prop({ required: true })
  zone: string;

  @Prop()
  postalCode?: string;
}
const ShippingAddressSchema = SchemaFactory.createForClass(ShippingAddress);

// --- Main Order Schema ---
@Schema({ timestamps: true })
export class Order {
  @Prop({ required: true, unique: true })
  orderNumber: string;

  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true })
  customerId: string;

  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true })
  sellerId: string;

  @Prop({ type: [OrderItemSchema], required: true })
  items: OrderItem[];

  // --- Financials ---
  @Prop({ required: true })
  subtotal: number;

  @Prop({ default: 0 })
  shippingCost: number;

  @Prop({ default: 0 })
  tax: number;

  @Prop({ required: true })
  totalAmount: number;

  // --- Shipping ---
  @Prop({ type: ShippingAddressSchema, required: true })
  shippingAddress: ShippingAddress;

  // --- Status & Payment ---
  @Prop({ type: String, enum: OrderStatus, default: OrderStatus.PENDING })
  status: OrderStatus;

  @Prop({ type: String, enum: PaymentStatus, default: PaymentStatus.PENDING })
  paymentStatus: PaymentStatus;

  @Prop({
    type: String,
    enum: PaymentMethod,
    default: PaymentMethod.CASH_ON_DELIVERY,
  })
  paymentMethod: PaymentMethod;

  @Prop()
  notes?: string;

  // --- Timestamps ---
  @Prop({ type: Date })
  deliveredAt?: Date;

  @Prop({ type: Date })
  cancelledAt?: Date;

  createdAt: Date;
  updatedAt: Date;
}

export const OrderSchema = SchemaFactory.createForClass(Order);


--------------------------------------------------------------------------------
--- FILE: src/products/products.controller.ts ---
--------------------------------------------------------------------------------

import { Controller, Get } from '@nestjs/common';
import { ApiOperation, ApiTags } from '@nestjs/swagger';
import { ProductsService } from './products.service';
import { ProductResponseDto } from './dto/product-response.dto'; // <-- Import DTO

@ApiTags('Products')
@Controller('products')
export class ProductsController {
  constructor(private readonly productsService: ProductsService) {}

  // --- NEW PUBLIC COUNTER ENDPOINT ---
  @Get('count')
  @ApiOperation({ summary: 'Get the total number of products' })
  async getProductCount(): Promise<{ totalProducts: number }> {
    const count = await this.productsService.countAll();
    return { totalProducts: count };
  }

  // --- EXISTING PUBLIC ENDPOINT (NOW TYPED) ---
  @Get()
  @ApiOperation({ summary: 'Get a list of all products' })
  async findAll(): Promise<ProductResponseDto[]> {
    const products = await this.productsService.findAll();
    // Map the database documents to our safe DTO before sending
    return products.map((product) =>
      ProductResponseDto.fromProductDocument(product),
    );
  }
}


--------------------------------------------------------------------------------
--- FILE: src/products/products.module.ts ---
--------------------------------------------------------------------------------

import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { ProductsController } from './products.controller';
import { ProductsService } from './products.service';
import { Product, ProductSchema } from './schemas/product.schema';

@Module({
  imports: [
    MongooseModule.forFeature([{ name: Product.name, schema: ProductSchema }]),
  ],
  controllers: [ProductsController],
  providers: [ProductsService],
})
export class ProductsModule {}


--------------------------------------------------------------------------------
--- FILE: src/products/products.service.ts ---
--------------------------------------------------------------------------------

import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Product, ProductDocument } from './schemas/product.schema';

@Injectable()
export class ProductsService {
  constructor(
    @InjectModel(Product.name) private productModel: Model<ProductDocument>,
  ) {}

  // The return type is now strongly typed
  async findAll(): Promise<ProductDocument[]> {
    return this.productModel.find().exec();
  }

  // --- NEW METHOD for the counter ---
  async countAll(): Promise<number> {
    return this.productModel.countDocuments().exec();
  }
}


--------------------------------------------------------------------------------
--- FILE: src/products/dto/product-response.dto.ts ---
--------------------------------------------------------------------------------

import { ProductDocument } from '../schemas/product.schema';

// Defines the data structure for a product when sent in an API response.
export class ProductResponseDto {
  _id: string;
  name: string;
  description: string;
  images: string[];
  categoryId: string;
  zoneId: string;
  sellerId: string;
  pricingTiers: {
    minQuantity: number;
    maxQuantity?: number;
    pricePerUnit: number;
  }[];
  minimumOrderQuantity: number;
  stockQuantity: number;
  unit: string;
  brand?: string;
  status: string;
  rating: number;
  reviewCount: number;
  createdAt: Date;
  updatedAt: Date;

  static fromProductDocument(productDoc: ProductDocument): ProductResponseDto {
    const dto = new ProductResponseDto();
    dto._id = productDoc._id.toString();
    dto.name = productDoc.name;
    dto.description = productDoc.description;
    dto.images = productDoc.images;
    dto.categoryId = productDoc.categoryId;
    dto.zoneId = productDoc.zoneId;
    dto.sellerId = productDoc.sellerId;
    dto.pricingTiers = productDoc.pricingTiers;
    dto.minimumOrderQuantity = productDoc.minimumOrderQuantity;
    dto.stockQuantity = productDoc.stockQuantity;
    dto.unit = productDoc.unit;
    dto.brand = productDoc.brand;
    dto.status = productDoc.status;
    dto.rating = productDoc.rating;
    dto.reviewCount = productDoc.reviewCount;
    dto.createdAt = productDoc.createdAt;
    dto.updatedAt = productDoc.updatedAt;
    return dto;
  }
}


--------------------------------------------------------------------------------
--- FILE: src/products/schemas/product.schema.ts ---
--------------------------------------------------------------------------------

import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import mongoose, { HydratedDocument } from 'mongoose';

export type ProductDocument = HydratedDocument<Product>;

// --- Enums for Type Safety ---
export enum ProductStatus {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  OUT_OF_STOCK = 'out_of_stock',
}

export enum ProductUnit {
  PIECE = 'piece',
  KG = 'kg',
  SET = 'set',
  BOTTLE = 'bottle',
  PAIR = 'pair',
}

// --- Nested Schema for Pricing Tiers ---
@Schema({ _id: false })
class PricingTier {
  @Prop({ required: true })
  minQuantity: number;

  @Prop()
  maxQuantity?: number; // Optional for the highest tier

  @Prop({ required: true })
  pricePerUnit: number;
}
const PricingTierSchema = SchemaFactory.createForClass(PricingTier);

// --- Main Product Schema ---
@Schema({ timestamps: true })
export class Product {
  @Prop({ required: true, trim: true })
  name: string;

  @Prop({ required: true, trim: true })
  description: string;

  @Prop({ type: [String], default: [] })
  images: string[];

  // --- Relationships ---
  @Prop({
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Category',
    required: true,
  })
  categoryId: string;

  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'Zone', required: true })
  zoneId: string;

  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true })
  sellerId: string;

  // --- Pricing & Inventory ---
  @Prop({ type: [PricingTierSchema], default: [] })
  pricingTiers: PricingTier[];

  @Prop({ required: true })
  minimumOrderQuantity: number;

  @Prop({ default: 0 })
  stockQuantity: number;

  @Prop({ type: String, enum: ProductUnit, required: true })
  unit: ProductUnit;

  // --- Details & Specifications ---
  @Prop()
  brand?: string;

  @Prop()
  model?: string;

  @Prop()
  specifications?: string;

  @Prop()
  sku?: string;

  @Prop()
  weight?: number; // in kg

  @Prop()
  dimensions?: string; // e.g., "10 x 5 x 15 cm"

  // --- Status & Metrics ---
  @Prop({ type: String, enum: ProductStatus, default: ProductStatus.ACTIVE })
  status: ProductStatus;

  @Prop({ default: true })
  isActive: boolean;

  @Prop({ default: 0 })
  viewCount: number;

  @Prop({ default: 0 })
  orderCount: number;

  @Prop({ default: 0, min: 0, max: 5 })
  rating: number;

  @Prop({ default: 0 })
  reviewCount: number;

  // --- Timestamps (For TypeScript) ---
  createdAt: Date;
  updatedAt: Date;
}

export const ProductSchema = SchemaFactory.createForClass(Product);


--------------------------------------------------------------------------------
--- FILE: src/users/users.controller.ts ---
--------------------------------------------------------------------------------

import { Controller, Get, UseGuards } from '@nestjs/common';
import { ApiHeader, ApiOperation, ApiTags } from '@nestjs/swagger';
import { UsersService } from './users.service';
import { UserResponseDto } from './dto/user-response.dto';
import { ApiKeyGuard } from '../auth/guards/api-key.guard';

@ApiTags('Users')
@Controller('users')
// NOTE: We have removed @UseGuards and @ApiHeader from the controller level
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  // --- NEW PUBLIC ENDPOINT ---
  @Get('count')
  @ApiOperation({ summary: 'Get the total number of registered users' })
  async getUserCount(): Promise<{ totalUsers: number }> {
    const count = await this.usersService.countAll();
    return { totalUsers: count };
  }

  // --- EXISTING PRIVATE ENDPOINT ---
  @Get()
  @ApiOperation({ summary: 'Get a list of all users (Protected)' })
  // We moved the guard and header here to protect only this specific endpoint
  @ApiHeader({
    name: 'x-api-key',
    description: 'The secret API key for access',
  })
  @UseGuards(ApiKeyGuard)
  async findAll(): Promise<UserResponseDto[]> {
    const users = await this.usersService.findAll();
    return users.map((user) => UserResponseDto.fromUserDocument(user));
  }
}


--------------------------------------------------------------------------------
--- FILE: src/users/users.module.ts ---
--------------------------------------------------------------------------------

import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { UsersController } from './users.controller';
import { UsersService } from './users.service';
import { User, UserSchema } from './schemas/user.schema';
import { ConfigModule } from '@nestjs/config'; // <-- 1. IMPORT THIS

@Module({
  imports: [
    ConfigModule, // <-- 2. ADD THIS
    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),
  ],
  controllers: [UsersController],
  providers: [UsersService],
})
export class UsersModule {}


--------------------------------------------------------------------------------
--- FILE: src/users/users.service.ts ---
--------------------------------------------------------------------------------

import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { User, UserDocument } from './schemas/user.schema';

@Injectable()
export class UsersService {
  constructor(@InjectModel(User.name) private userModel: Model<UserDocument>) {}

  async findAll(): Promise<UserDocument[]> {
    return this.userModel.find().exec();
  }

  // --- ADD THIS NEW METHOD ---
  /**
   * Counts all users in the database.
   * @returns A promise that resolves to the total number of users.
   */
  async countAll(): Promise<number> {
    return this.userModel.countDocuments().exec();
  }
}


--------------------------------------------------------------------------------
--- FILE: src/users/dto/user-response.dto.ts ---
--------------------------------------------------------------------------------

import { UserDocument } from '../schemas/user.schema'; // <-- 1. IMPORT the UserDocument type

// This class defines the shape of the User object we send back to the client.
// Notice it does NOT include the password.
export class UserResponseDto {
  _id: string;
  email: string;
  firstName: string;
  lastName: string;
  phone?: string;
  profilePicture?: string;
  address?: string;
  zone?: string;
  isActive: boolean;
  emailVerified: boolean;
  role: string; // e.g., 'admin', 'seller'
  kycStatus: string;
  sellerStatus: string;
  businessName?: string;
  trustScore: number;
  isTrustedUser: boolean;
  createdAt: Date;
  updatedAt: Date;
  lastLogin?: Date;

  // This is a helper function to easily convert a database document to a DTO
  // FIXED: We specify the correct type for userDoc instead of `any`
  static fromUserDocument(userDoc: UserDocument): UserResponseDto {
    // <-- 2. SPECIFY the correct type here
    const dto = new UserResponseDto();

    // Now TypeScript knows the exact shape of userDoc, and all these assignments are safe!
    dto._id = userDoc._id.toString();
    dto.email = userDoc.email;
    dto.firstName = userDoc.firstName;
    dto.lastName = userDoc.lastName;
    dto.phone = userDoc.phone;
    dto.profilePicture = userDoc.profilePicture;
    dto.address = userDoc.address;
    dto.zone = userDoc.zone;
    dto.isActive = userDoc.isActive;
    dto.emailVerified = userDoc.emailVerified;
    dto.role = userDoc.role;
    dto.kycStatus = userDoc.kycStatus;
    dto.sellerStatus = userDoc.sellerStatus;
    dto.businessName = userDoc.businessName;
    dto.trustScore = userDoc.trustScore;
    dto.isTrustedUser = userDoc.isTrustedUser;
    dto.createdAt = userDoc.createdAt;
    dto.updatedAt = userDoc.updatedAt;
    dto.lastLogin = userDoc.lastLogin;

    return dto;
  }
}


--------------------------------------------------------------------------------
--- FILE: src/users/schemas/user.schema.ts ---
--------------------------------------------------------------------------------

import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import mongoose, { HydratedDocument } from 'mongoose';

export type UserDocument = HydratedDocument<User>;

// --- Enums for Type Safety ---
export enum UserRole {
  ADMIN = 'admin',
  SELLER = 'seller',
  CUSTOMER = 'customer',
}

export enum KycStatus {
  APPROVED = 'approved',
  PENDING = 'pending',
  REJECTED = 'rejected',
  NOT_STARTED = 'not_started',
}

export enum SellerStatus {
  APPROVED = 'approved',
  PENDING = 'pending',
  REJECTED = 'rejected',
}

// --- Nested Schema for TwoFactorAuth ---
@Schema({ _id: false }) // _id: false prevents Mongoose from creating an _id for this sub-document
class TwoFactorAuth {
  @Prop({ default: false })
  enabled: boolean;

  @Prop({ type: [String], default: [] })
  backupCodes: string[];
}
const TwoFactorAuthSchema = SchemaFactory.createForClass(TwoFactorAuth);

// --- Main User Schema ---
@Schema({ timestamps: true })
export class User {
  // --- Core Identity ---
  @Prop({ required: true, unique: true, lowercase: true, trim: true })
  email: string;

  @Prop({ select: false }) // `select: false` hides the password by default in `find()` queries
  password?: string;

  @Prop({ required: true, trim: true })
  firstName: string;

  @Prop({ required: true, trim: true })
  lastName: string;

  @Prop()
  phone?: string;

  @Prop()
  profilePicture?: string; // For Google/Social logins

  // --- Authentication & Social Login ---
  @Prop({ type: [String], default: [] })
  authProviders: string[];

  @Prop()
  googleId?: string;

  @Prop()
  firebaseUid?: string;

  // --- Location & Contact ---
  @Prop()
  address?: string;

  @Prop()
  zone?: string;

  // --- Status & Roles ---
  @Prop({ default: true })
  isActive: boolean;

  @Prop({ default: false })
  emailVerified: boolean;

  @Prop({ type: String, enum: UserRole, default: UserRole.CUSTOMER })
  role: UserRole;

  @Prop({ type: String, enum: KycStatus, default: KycStatus.NOT_STARTED })
  kycStatus: KycStatus;

  @Prop({ type: String, enum: SellerStatus, default: SellerStatus.PENDING })
  sellerStatus: SellerStatus;

  // --- Seller-Specific Information ---
  @Prop()
  businessName?: string;

  @Prop()
  businessLicense?: string;

  @Prop()
  businessDescription?: string;

  @Prop({ type: Date })
  sellerAppliedAt?: Date;

  @Prop({ type: Date })
  sellerApprovedAt?: Date;

  // --- Trust & Reputation ---
  @Prop({ default: false })
  isTrustedUser: boolean;

  @Prop({ type: Date })
  trustedUserSince?: Date;

  @Prop({ default: 0 })
  trustScore: number;

  // --- Activity & Engagement ---
  @Prop({ default: 0 })
  reviewCount: number;

  @Prop({ default: 0 })
  submissionCount: number;

  @Prop({ default: 0 })
  helpfulVotesReceived: number;

  @Prop({ type: Date })
  lastLogin?: Date;

  // --- User Preferences & Documents ---
  @Prop({
    type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Broker' }],
    default: [],
  })
  favoriteBrokers: string[]; // Assuming these are references to other collections

  @Prop({
    type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'PropFirm' }],
    default: [],
  })
  favoritePropFirms: string[]; // Assuming these are references to other collections

  @Prop({ type: [String], default: [] })
  kycDocuments: string[]; // Assuming these are URLs to documents

  // --- Security ---
  @Prop({
    type: TwoFactorAuthSchema,
    default: () => ({ enabled: false, backupCodes: [] }),
  })
  twoFactorAuth: TwoFactorAuth;

  // --- ADDED FOR TYPESCRIPT AWARENESS ---
  // These are automatically managed by Mongoose via the `timestamps: true` option,
  // but we need to declare them here for TypeScript to know they exist.
  createdAt: Date;
  updatedAt: Date;
}

export const UserSchema = SchemaFactory.createForClass(User);


--------------------------------------------------------------------------------
--- FILE: src/zones/zones.controller.ts ---
--------------------------------------------------------------------------------

import { Controller, Get } from '@nestjs/common';
import { ApiOperation, ApiTags } from '@nestjs/swagger';
import { ZonesService } from './zones.service';
import { ZoneResponseDto } from './dto/zone-response.dto';

@ApiTags('Zones')
@Controller('zones')
export class ZonesController {
  constructor(private readonly zonesService: ZonesService) {}

  // --- ADD THIS NEW ENDPOINT ---
  @Get('count')
  @ApiOperation({ summary: 'Get the total number of zones' })
  async getZoneCount(): Promise<{ totalZones: number }> {
    const count = await this.zonesService.countAll();
    return { totalZones: count };
  }

  @Get()
  @ApiOperation({ summary: 'Get a list of all zones' })
  async findAll(): Promise<ZoneResponseDto[]> {
    const zones = await this.zonesService.findAll();
    return zones.map((zone) => ZoneResponseDto.fromZoneDocument(zone));
  }
}


--------------------------------------------------------------------------------
--- FILE: src/zones/zones.module.ts ---
--------------------------------------------------------------------------------

import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { ZonesController } from './zones.controller';
import { ZonesService } from './zones.service';
import { Zone, ZoneSchema } from './schemas/zone.schema';

@Module({
  imports: [
    MongooseModule.forFeature([{ name: Zone.name, schema: ZoneSchema }]),
  ],
  controllers: [ZonesController],
  providers: [ZonesService],
})
export class ZonesModule {}


--------------------------------------------------------------------------------
--- FILE: src/zones/zones.service.ts ---
--------------------------------------------------------------------------------

import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Zone, ZoneDocument } from './schemas/zone.schema';

@Injectable()
export class ZonesService {
  constructor(@InjectModel(Zone.name) private zoneModel: Model<ZoneDocument>) {}

  async findAll(): Promise<ZoneDocument[]> {
    return this.zoneModel.find().sort({ sortOrder: 1 }).exec();
  }

  // --- ADD THIS NEW METHOD ---
  async countAll(): Promise<number> {
    return this.zoneModel.countDocuments().exec();
  }
}


--------------------------------------------------------------------------------
--- FILE: src/zones/dto/zone-response.dto.ts ---
--------------------------------------------------------------------------------

import { ZoneDocument } from '../schemas/zone.schema';

export class ZoneResponseDto {
  _id: string;
  name: string;
  code: string;
  description?: string;
  isActive: boolean;
  sortOrder: number;

  static fromZoneDocument(zoneDoc: ZoneDocument): ZoneResponseDto {
    const dto = new ZoneResponseDto();
    dto._id = zoneDoc._id.toString();
    dto.name = zoneDoc.name;
    dto.code = zoneDoc.code;
    dto.description = zoneDoc.description;
    dto.isActive = zoneDoc.isActive;
    dto.sortOrder = zoneDoc.sortOrder;
    return dto;
  }
}


--------------------------------------------------------------------------------
--- FILE: src/zones/schemas/zone.schema.ts ---
--------------------------------------------------------------------------------

import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { HydratedDocument } from 'mongoose';

export type ZoneDocument = HydratedDocument<Zone>;

@Schema({ timestamps: true })
export class Zone {
  @Prop({ required: true, unique: true, trim: true })
  name: string;

  @Prop({ required: true, unique: true, trim: true, uppercase: true })
  code: string;

  @Prop({ trim: true })
  description?: string;

  @Prop({ default: true })
  isActive: boolean;

  @Prop({ default: 0 })
  sortOrder: number;

  // For TypeScript awareness of Mongoose's timestamps
  createdAt: Date;
  updatedAt: Date;
}

export const ZoneSchema = SchemaFactory.createForClass(Zone);


